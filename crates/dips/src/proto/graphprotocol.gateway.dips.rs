// This file is @generated by prost-build.
/// *
/// A request to cancel an _indexing agreement_.
///
/// See the `DipsService.CancelAgreement` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelAgreementRequest {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    /// / a signed ERC-712 message cancelling an agreement
    #[prost(bytes = "vec", tag = "2")]
    pub signed_cancellation: ::prost::alloc::vec::Vec<u8>,
}
/// *
/// A response to a request to cancel an _indexing agreement_.
///
/// See the `DipsService.CancelAgreement` method.
///
/// / Empty response, eventually we may add custom status codes
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelAgreementResponse {}
/// *
/// A request to collect payment _indexing agreement_.
///
/// See the `DipsService.CollectPayment` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectPaymentRequest {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub signed_collection: ::prost::alloc::vec::Vec<u8>,
}
/// *
/// A response to a request to collect payment for an _indexing agreement_.
///
/// See the `DipsService.CollectAgreement` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectPaymentResponse {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(enumeration = "CollectPaymentStatus", tag = "2")]
    pub status: i32,
    /// Receipt ID for polling
    #[prost(string, tag = "3")]
    pub receipt_id: ::prost::alloc::string::String,
    /// Payment amount in GRT
    #[prost(string, tag = "4")]
    pub amount: ::prost::alloc::string::String,
    /// Initial status: "PENDING"
    #[prost(string, tag = "5")]
    pub payment_status: ::prost::alloc::string::String,
}
/// *
/// A request to get receipt status by ID.
///
/// See the `GatewayDipsService.GetReceiptById` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReceiptByIdRequest {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(string, tag = "2")]
    pub receipt_id: ::prost::alloc::string::String,
}
/// *
/// A response containing the receipt status.
///
/// See the `GatewayDipsService.GetReceiptById` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReceiptByIdResponse {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(string, tag = "2")]
    pub receipt_id: ::prost::alloc::string::String,
    /// "PENDING" | "SUBMITTED" | "FAILED"
    #[prost(string, tag = "3")]
    pub status: ::prost::alloc::string::String,
    /// Present when SUBMITTED
    #[prost(string, tag = "4")]
    pub transaction_hash: ::prost::alloc::string::String,
    /// Present when FAILED
    #[prost(string, tag = "5")]
    pub error_message: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub amount: ::prost::alloc::string::String,
    /// ISO timestamp when SUBMITTED
    #[prost(string, tag = "7")]
    pub payment_submitted_at: ::prost::alloc::string::String,
}
/// *
/// The status on response to collect an _indexing agreement_.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CollectPaymentStatus {
    /// / The payment request was accepted.
    Accept = 0,
    /// / The payment request was done before min epochs passed
    ErrTooEarly = 1,
    /// / The payment request was done after max epochs passed
    ErrTooLate = 2,
    /// / The payment request is for too large an amount
    ErrAmountOutOfBounds = 3,
    /// / Something else went terribly wrong
    ErrUnknown = 99,
}
impl CollectPaymentStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Accept => "ACCEPT",
            Self::ErrTooEarly => "ERR_TOO_EARLY",
            Self::ErrTooLate => "ERR_TOO_LATE",
            Self::ErrAmountOutOfBounds => "ERR_AMOUNT_OUT_OF_BOUNDS",
            Self::ErrUnknown => "ERR_UNKNOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACCEPT" => Some(Self::Accept),
            "ERR_TOO_EARLY" => Some(Self::ErrTooEarly),
            "ERR_TOO_LATE" => Some(Self::ErrTooLate),
            "ERR_AMOUNT_OUT_OF_BOUNDS" => Some(Self::ErrAmountOutOfBounds),
            "ERR_UNKNOWN" => Some(Self::ErrUnknown),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod gateway_dips_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct GatewayDipsServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GatewayDipsServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GatewayDipsServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GatewayDipsServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GatewayDipsServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// *
        /// Cancel an _indexing agreement_.
        ///
        /// This method allows the indexer to notify the DIPs gateway that the agreement
        /// should be canceled.
        pub async fn cancel_agreement(
            &mut self,
            request: impl tonic::IntoRequest<super::CancelAgreementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelAgreementResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/graphprotocol.gateway.dips.GatewayDipsService/CancelAgreement",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "graphprotocol.gateway.dips.GatewayDipsService",
                        "CancelAgreement",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// *
        /// Collect payment for an _indexing agreement_.
        ///
        /// This method allows the indexer to report the work completed to the DIPs gateway
        /// and receive payment for the indexing work done.
        pub async fn collect_payment(
            &mut self,
            request: impl tonic::IntoRequest<super::CollectPaymentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectPaymentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/graphprotocol.gateway.dips.GatewayDipsService/CollectPayment",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "graphprotocol.gateway.dips.GatewayDipsService",
                        "CollectPayment",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// *
        /// Get the status of a payment receipt by ID.
        ///
        /// This method allows the indexer to poll for the status of a previously
        /// initiated payment collection.
        pub async fn get_receipt_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReceiptByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReceiptByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/graphprotocol.gateway.dips.GatewayDipsService/GetReceiptById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "graphprotocol.gateway.dips.GatewayDipsService",
                        "GetReceiptById",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod gateway_dips_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with GatewayDipsServiceServer.
    #[async_trait]
    pub trait GatewayDipsService: std::marker::Send + std::marker::Sync + 'static {
        /// *
        /// Cancel an _indexing agreement_.
        ///
        /// This method allows the indexer to notify the DIPs gateway that the agreement
        /// should be canceled.
        async fn cancel_agreement(
            &self,
            request: tonic::Request<super::CancelAgreementRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelAgreementResponse>,
            tonic::Status,
        >;
        /// *
        /// Collect payment for an _indexing agreement_.
        ///
        /// This method allows the indexer to report the work completed to the DIPs gateway
        /// and receive payment for the indexing work done.
        async fn collect_payment(
            &self,
            request: tonic::Request<super::CollectPaymentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CollectPaymentResponse>,
            tonic::Status,
        >;
        /// *
        /// Get the status of a payment receipt by ID.
        ///
        /// This method allows the indexer to poll for the status of a previously
        /// initiated payment collection.
        async fn get_receipt_by_id(
            &self,
            request: tonic::Request<super::GetReceiptByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetReceiptByIdResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct GatewayDipsServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> GatewayDipsServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for GatewayDipsServiceServer<T>
    where
        T: GatewayDipsService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/graphprotocol.gateway.dips.GatewayDipsService/CancelAgreement" => {
                    #[allow(non_camel_case_types)]
                    struct CancelAgreementSvc<T: GatewayDipsService>(pub Arc<T>);
                    impl<
                        T: GatewayDipsService,
                    > tonic::server::UnaryService<super::CancelAgreementRequest>
                    for CancelAgreementSvc<T> {
                        type Response = super::CancelAgreementResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelAgreementRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GatewayDipsService>::cancel_agreement(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CancelAgreementSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/graphprotocol.gateway.dips.GatewayDipsService/CollectPayment" => {
                    #[allow(non_camel_case_types)]
                    struct CollectPaymentSvc<T: GatewayDipsService>(pub Arc<T>);
                    impl<
                        T: GatewayDipsService,
                    > tonic::server::UnaryService<super::CollectPaymentRequest>
                    for CollectPaymentSvc<T> {
                        type Response = super::CollectPaymentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CollectPaymentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GatewayDipsService>::collect_payment(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CollectPaymentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/graphprotocol.gateway.dips.GatewayDipsService/GetReceiptById" => {
                    #[allow(non_camel_case_types)]
                    struct GetReceiptByIdSvc<T: GatewayDipsService>(pub Arc<T>);
                    impl<
                        T: GatewayDipsService,
                    > tonic::server::UnaryService<super::GetReceiptByIdRequest>
                    for GetReceiptByIdSvc<T> {
                        type Response = super::GetReceiptByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetReceiptByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as GatewayDipsService>::get_receipt_by_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetReceiptByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for GatewayDipsServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "graphprotocol.gateway.dips.GatewayDipsService";
    impl<T> tonic::server::NamedService for GatewayDipsServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
