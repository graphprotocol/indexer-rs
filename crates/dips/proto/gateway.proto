syntax = "proto3";

package graphprotocol.gateway.dips;

service GatewayDipsService {
  /**
   * Cancel an _indexing agreement_.
   *
   * This method allows the indexer to notify the DIPs gateway that the agreement
   * should be canceled.
   */
  rpc CancelAgreement(CancelAgreementRequest) returns (CancelAgreementResponse);

  /**
   * Collect payment for an _indexing agreement_.
   *
   * This method allows the indexer to report the work completed to the DIPs gateway
   * and receive payment for the indexing work done.
   */
  rpc CollectPayment(CollectPaymentRequest) returns (CollectPaymentResponse);

  /**
   * Get the status of a payment receipt by ID.
   *
   * This method allows the indexer to poll for the status of a previously
   * initiated payment collection.
   */
  rpc GetReceiptById(GetReceiptByIdRequest) returns (GetReceiptByIdResponse);
}


/**
 * A request to cancel an _indexing agreement_.
 *
 * See the `DipsService.CancelAgreement` method.
 */
message CancelAgreementRequest {
  uint64 version = 1;
  bytes signed_cancellation = 2;  /// a signed ERC-712 message cancelling an agreement
}

/**
 * A response to a request to cancel an _indexing agreement_.
 *
 * See the `DipsService.CancelAgreement` method.
 */
message CancelAgreementResponse {
  /// Empty response, eventually we may add custom status codes
}

/**
 * A request to collect payment _indexing agreement_.
  *
  * See the `DipsService.CollectPayment` method.
 */
message CollectPaymentRequest {
  uint64 version = 1;
  bytes signed_collection = 2; 
}

/**
 * A response to a request to collect payment for an _indexing agreement_.
 *
 * See the `DipsService.CollectAgreement` method.
 */
message CollectPaymentResponse {
  uint64 version = 1;
  CollectPaymentStatus status = 2;
  string receipt_id = 3;        // Receipt ID for polling
  string amount = 4;            // Payment amount in GRT
  string payment_status = 5;    // Initial status: "PENDING"
}

/**
 * The status on response to collect an _indexing agreement_.
 */
enum CollectPaymentStatus {
  ACCEPT = 0; /// The payment request was accepted.
  ERR_TOO_EARLY = 1; /// The payment request was done before min epochs passed
  ERR_TOO_LATE = 2; /// The payment request was done after max epochs passed
  ERR_AMOUNT_OUT_OF_BOUNDS = 3; /// The payment request is for too large an amount
  ERR_UNKNOWN = 99; /// Something else went terribly wrong
}

/**
 * A request to get receipt status by ID.
 *
 * See the `GatewayDipsService.GetReceiptById` method.
 */
message GetReceiptByIdRequest {
  uint64 version = 1;
  string receipt_id = 2;
}

/**
 * A response containing the receipt status.
 *
 * See the `GatewayDipsService.GetReceiptById` method.
 */
message GetReceiptByIdResponse {
  uint64 version = 1;
  string receipt_id = 2;
  string status = 3;            // "PENDING" | "SUBMITTED" | "FAILED"
  string transaction_hash = 4;  // Present when SUBMITTED
  string error_message = 5;     // Present when FAILED
  string amount = 6;
  string payment_submitted_at = 7;  // ISO timestamp when SUBMITTED
}
