"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes
    
    """
    The block number
    """
    number: Int!
    
    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
    
    """
    The hash of the parent block
    """
    parentHash: Bytes
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    
    """
    The deployment ID
    """
    deployment: String!
    
    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow
    
    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}

scalar BigDecimal

scalar BigInt

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

input BlockChangedFilter {
    number_gte: Int!
}

scalar Bytes

type EscrowAccount @entity {
    id: Bytes!
    payer: Payer!
    collector: Collector!
    receiver: Receiver!
    balance: BigInt!
    totalAmountThawing: BigInt!
    thawEndTimestamp: BigInt!
}

input EscrowAccount_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    payer: String
    payer_not: String
    payer_in: [String!]
    payer_not_in: [String!]
    payer_: Payer_filter
    collector: String
    collector_not: String
    collector_in: [String!]
    collector_not_in: [String!]
    collector_: Collector_filter
    receiver: String
    receiver_not: String
    receiver_in: [String!]
    receiver_not_in: [String!]
    receiver_: Receiver_filter
    balance: BigInt
    balance_not: BigInt
    balance_gt: BigInt
    balance_lt: BigInt
    balance_gte: BigInt
    balance_lte: BigInt
    balance_in: [BigInt!]
    balance_not_in: [BigInt!]
    totalAmountThawing: BigInt
    totalAmountThawing_not: BigInt
    totalAmountThawing_gt: BigInt
    totalAmountThawing_lt: BigInt
    totalAmountThawing_gte: BigInt
    totalAmountThawing_lte: BigInt
    totalAmountThawing_in: [BigInt!]
    totalAmountThawing_not_in: [BigInt!]
    thawEndTimestamp: BigInt
    thawEndTimestamp_not: BigInt
    thawEndTimestamp_gt: BigInt
    thawEndTimestamp_lt: BigInt
    thawEndTimestamp_gte: BigInt
    thawEndTimestamp_lte: BigInt
    thawEndTimestamp_in: [BigInt!]
    thawEndTimestamp_not_in: [BigInt!]
    _change_block: BlockChangedFilter
    and: [EscrowAccount_filter]
    or: [EscrowAccount_filter]
}

enum EscrowAccount_orderBy {
    id
    payer
    payer__id
    collector
    collector__id
    collector__type
    receiver
    receiver__id
    balance
    totalAmountThawing
    thawEndTimestamp
}

type Collector @entity {
    id: Bytes!
    type: String
    escrowAccounts: [EscrowAccount!]! @derivedFrom(field: "collector")
}

input Collector_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    type: String
    type_not: String
    type_in: [String!]
    type_not_in: [String!]
    type_contains: String
    type_not_contains: String
    type_starts_with: String
    type_not_starts_with: String
    type_ends_with: String
    type_not_ends_with: String
    escrowAccounts_: EscrowAccount_filter
    _change_block: BlockChangedFilter
    and: [Collector_filter]
    or: [Collector_filter]
}

enum Collector_orderBy {
    id
    type
    escrowAccounts
}

# Will contain only the latest rav
type LatestRav @entity {
    id: Bytes!
    payer: Payer!
    dataService: DataService!
    serviceProvider: Receiver!
    valueAggregate: BigInt!
    timestamp: BigInt!
    metadata: Bytes!
    signature: Bytes!
}

input LatestRav_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    payer: String
    payer_not: String
    payer_in: [String!]
    payer_not_in: [String!]
    payer_: Payer_filter
    dataService: String
    dataService_not: String
    dataService_in: [String!]
    dataService_not_in: [String!]
    dataService_: DataService_filter
    serviceProvider: String
    serviceProvider_not: String
    serviceProvider_in: [String!]
    serviceProvider_not_in: [String!]
    serviceProvider_: Receiver_filter
    valueAggregate: BigInt
    valueAggregate_not: BigInt
    valueAggregate_gt: BigInt
    valueAggregate_lt: BigInt
    valueAggregate_gte: BigInt
    valueAggregate_lte: BigInt
    valueAggregate_in: [BigInt!]
    valueAggregate_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_not: BigInt
    timestamp_gt: BigInt
    timestamp_lt: BigInt
    timestamp_gte: BigInt
    timestamp_lte: BigInt
    timestamp_in: [BigInt!]
    timestamp_not_in: [BigInt!]
    metadata: Bytes
    metadata_not: Bytes
    metadata_in: [Bytes!]
    metadata_not_in: [Bytes!]
    signature: Bytes
    signature_not: Bytes
    signature_in: [Bytes!]
    signature_not_in: [Bytes!]
    _change_block: BlockChangedFilter
    and: [LatestRav_filter]
    or: [LatestRav_filter]
}

enum LatestRav_orderBy {
    id
    payer
    payer__id
    dataService
    dataService__id
    serviceProvider
    serviceProvider__id
    valueAggregate
    timestamp
    metadata
    signature
}

type DataService @entity {
    id: Bytes!
    latestRav: [LatestRav!]! @derivedFrom(field: "dataService")
}

input DataService_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    latestRav_: LatestRav_filter
    _change_block: BlockChangedFilter
    and: [DataService_filter]
    or: [DataService_filter]
}

enum DataService_orderBy {
    id
    latestRav
}

# Represents the gateway
type Payer @entity {
    # payer address
    id: Bytes!
    # Payer Escrow
    escrowAccounts: [EscrowAccount!]! @derivedFrom(field: "payer")
    signers: [Signer!]! @derivedFrom(field: "payer")
}

input Payer_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    escrowAccounts_: EscrowAccount_filter
    signers_: Signer_filter
    _change_block: BlockChangedFilter
    and: [Payer_filter]
    or: [Payer_filter]
}

enum Payer_orderBy {
    id
    escrowAccounts
    signers
}

# Represents the indexer
type Receiver @entity {
    # receiver address
    id: Bytes!
    escrowAccounts: [EscrowAccount!]! @derivedFrom(field: "receiver")
}

input Receiver_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    escrowAccounts_: EscrowAccount_filter
    _change_block: BlockChangedFilter
    and: [Receiver_filter]
    or: [Receiver_filter]
}

enum Receiver_orderBy {
    id
    escrowAccounts
}

type Signer @entity {
    id: Bytes!
    isAuthorized: Boolean!
    payer: Payer!
    thawEndTimestamp: BigInt!
}

input Signer_filter {
    id: Bytes
    id_not: Bytes
    id_in: [Bytes!]
    id_not_in: [Bytes!]
    isAuthorized: Boolean
    isAuthorized_not: Boolean
    isAuthorized_in: [Boolean!]
    isAuthorized_not_in: [Boolean!]
    payer: String
    payer_not: String
    payer_in: [String!]
    payer_not_in: [String!]
    payer_: Payer_filter
    thawEndTimestamp: BigInt
    thawEndTimestamp_not: BigInt
    thawEndTimestamp_gt: BigInt
    thawEndTimestamp_lt: BigInt
    thawEndTimestamp_gte: BigInt
    thawEndTimestamp_lte: BigInt
    thawEndTimestamp_in: [BigInt!]
    thawEndTimestamp_not_in: [BigInt!]
    _change_block: BlockChangedFilter
    and: [Signer_filter]
    or: [Signer_filter]
}

enum Signer_orderBy {
    id
    isAuthorized
    payer
    payer__id
    thawEndTimestamp
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Query {
    escrowAccount(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): EscrowAccount
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [EscrowAccount!]!
    collector(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Collector
    collectors(
        skip: Int = 0
        first: Int = 100
        orderBy: Collector_orderBy
        orderDirection: OrderDirection
        where: Collector_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Collector!]!
    latestRav(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): LatestRav
    latestRavs(
        skip: Int = 0
        first: Int = 100
        orderBy: LatestRav_orderBy
        orderDirection: OrderDirection
        where: LatestRav_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [LatestRav!]!
    dataService(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): DataService
    dataServices(
        skip: Int = 0
        first: Int = 100
        orderBy: DataService_orderBy
        orderDirection: OrderDirection
        where: DataService_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [DataService!]!
    payer(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Payer
    payers(
        skip: Int = 0
        first: Int = 100
        orderBy: Payer_orderBy
        orderDirection: OrderDirection
        where: Payer_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Payer!]!
    receiver(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Receiver
    receivers(
        skip: Int = 0
        first: Int = 100
        orderBy: Receiver_orderBy
        orderDirection: OrderDirection
        where: Receiver_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Receiver!]!
    signer(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Signer
    signers(
        skip: Int = 0
        first: Int = 100
        orderBy: Signer_orderBy
        orderDirection: OrderDirection
        where: Signer_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Signer!]!
    _meta(block: Block_height): _Meta_
}

type Subscription {
    escrowAccount(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): EscrowAccount
    escrowAccounts(
        skip: Int = 0
        first: Int = 100
        orderBy: EscrowAccount_orderBy
        orderDirection: OrderDirection
        where: EscrowAccount_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [EscrowAccount!]!
    collector(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Collector
    collectors(
        skip: Int = 0
        first: Int = 100
        orderBy: Collector_orderBy
        orderDirection: OrderDirection
        where: Collector_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Collector!]!
    latestRav(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): LatestRav
    latestRavs(
        skip: Int = 0
        first: Int = 100
        orderBy: LatestRav_orderBy
        orderDirection: OrderDirection
        where: LatestRav_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [LatestRav!]!
    dataService(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): DataService
    dataServices(
        skip: Int = 0
        first: Int = 100
        orderBy: DataService_orderBy
        orderDirection: OrderDirection
        where: DataService_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [DataService!]!
    payer(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Payer
    payers(
        skip: Int = 0
        first: Int = 100
        orderBy: Payer_orderBy
        orderDirection: OrderDirection
        where: Payer_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Payer!]!
    receiver(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Receiver
    receivers(
        skip: Int = 0
        first: Int = 100
        orderBy: Receiver_orderBy
        orderDirection: OrderDirection
        where: Receiver_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Receiver!]!
    signer(
        id: ID!
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Signer
    signers(
        skip: Int = 0
        first: Int = 100
        orderBy: Signer_orderBy
        orderDirection: OrderDirection
        where: Signer_filter
        block: Block_height
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): [Signer!]!
    _meta(block: Block_height): _Meta_
}